section
  .container.is-fluid
    = link_to 'Retour', root_path, class: "button is-info"

section.hero.is-fullheight
    .container
      .column.is-three-fifths.is-offset-one-fifth
        h1.title.is-1
          | Ajouter un restaurant
        h5.subtitle.is-5
          | Compléter les champs du formulaire pour ajouter un restaurant
        = form_with(model: @restaurant , local: true) do |form|
          .field
            label.label
              | Nom     
              .control
                = form.text_field :name, class: "input", placeholder: "Nom du restaurant"
          .field
            label.label
              | Prix                 
            .control.select.is-multiple.is-primary
                = form.select(:price, [['€', '€'],['€€', '€€'],['€€€', '€€€']],{},{ :multiple => true, class: 'is-medium'})
          .field
            label.label
              | Note
              .control
                input.slider.has-output.is-fullwidth.is-primary.is-circle id="sliderWithValue" name="restaurant[rating]" step="0.1" min="0" max="5" value="2.5" type="range"
                output for="sliderWithValue" 
                  | 2.5
          .field
            label.label
              | Types de cuisine
            .control.select.is-multiple.is-primary
              = form.select(:tag_list, options_from_collection_for_select(@tags, 'name', 'name', :tag_list),{ :prompt => "Types de cuisine"},{ :multiple => true, class: 'is-medium' })
          .field
            label.label
              | Adresse
              .control
                = form.text_field :address, class: "input", placeholder: "123 boulevard Haussaman 75001 Paris"
          .field
            label.label
              | Lien vers le restaurant (site web, delivroo...)
              .control
                = form.text_field :link, class: "input", placeholder: "https://deliveroo.fr/menu/paris/11eme-republique/the-kitchen-paris?day=today&time=ASAP"
          .field
            label.label
              | Source du lien
              .control
                = form.text_field :source, class: "input", placeholder: "Delivroo"
          .field
            label.label
              | Lien vers une image du restaurant
              .control
                = form.text_field :image_url, class: "input", placeholder: "https://f.roocdn.com/images/menus/79615/header-image.jpg?width=320&height=180&auto=webp&format=jpg&fit=crop&v=1537282411"                          
          .field
            p.control
              = form.submit "Enregistrer", class: "button is-primary"




scss: 
  section{
    margin-top: 30px;
  }

  a.button{
    margin-bottom: 35px;
  }

javascript:
  $(document).ready(function() {
    $('.is-medium').select2();
  });

  // Find output DOM associated to the DOM element passed as parameter
  function findOutputForSlider( element ) {
    var idVal = element.id;
    outputs = document.getElementsByTagName( 'output' );
    for( var i = 0; i < outputs.length; i++ ) {
      if ( outputs[ i ].htmlFor == idVal )
        return outputs[ i ];
    }}

  function getSliderOutputPosition( slider ) {
    // Update output position
    var newPlace,
        minValue;

    var style = window.getComputedStyle( slider, null );
    // Measure width of range input
    sliderWidth = parseInt( style.getPropertyValue( 'width' ), 10 );

    // Figure out placement percentage between left and right of input
    if ( !slider.getAttribute( 'min' ) ) {
      minValue = 0;
    } else {
      minValue = slider.getAttribute( 'min' );
    }
    var newPoint = ( slider.value - minValue ) / ( slider.getAttribute( 'max' ) - minValue );

    // Prevent bubble from going beyond left or right (unsupported browsers)
    if ( newPoint < 0 ) {
      newPlace = 0;
    } else if ( newPoint > 1 ) {
      newPlace = sliderWidth;
    } else {
      newPlace = sliderWidth * newPoint;
    }

    return {
      'position': newPlace + 'px'
    }}

  document.addEventListener( 'DOMContentLoaded', function () {
    // Get all document sliders
    var sliders = document.querySelectorAll( 'input[type="range"].slider' );
    [].forEach.call( sliders, function ( slider ) {
      var output = findOutputForSlider( slider );
      if ( output ) {
        if ( slider.classList.contains( 'has-output-tooltip' ) ) {
          // Get new output position
          var newPosition = getSliderOutputPosition( slider );

          // Set output position
          output.style[ 'left' ] = newPosition.position;
        }

        // Add event listener to update output when slider value change
        slider.addEventListener( 'input', function( event ) {
          if ( event.target.classList.contains( 'has-output-tooltip' ) ) {
            // Get new output position
            var newPosition = getSliderOutputPosition( event.target );

            // Set output position
            output.style[ 'left' ] = newPosition.position;
          }

          // Update output with slider value
          output.value = event.target.value;
        } );
      }
    } );
  } );